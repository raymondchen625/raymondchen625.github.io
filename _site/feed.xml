<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-08T11:04:31-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Raymond’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2019/09/08/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-09-08T10:40:21-04:00</published><updated>2019-09-08T10:40:21-04:00</updated><id>http://localhost:4000/jekyll/update/2019/09/08/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/09/08/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Hello world!</title><link href="http://localhost:4000/2019/09/07/hello-world/" rel="alternate" type="text/html" title="Hello world!" /><published>2019-09-07T13:29:01-04:00</published><updated>2019-09-07T13:29:01-04:00</updated><id>http://localhost:4000/2019/09/07/hello-world</id><content type="html" xml:base="http://localhost:4000/2019/09/07/hello-world/">&lt;p&gt;Welcome to WordPress. This is your first post. Edit or delete it, then start writing!&lt;/p&gt;</content><author><name>raymondchen625</name></author><summary type="html">Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</summary></entry><entry><title type="html">Web Page Broken on GKE only?</title><link href="http://localhost:4000/2019/08/07/web-page-broken-on-gke-only/" rel="alternate" type="text/html" title="Web Page Broken on GKE only?" /><published>2019-08-07T04:37:26-04:00</published><updated>2019-08-07T04:37:26-04:00</updated><id>http://localhost:4000/2019/08/07/web-page-broken-on-gke-only</id><content type="html" xml:base="http://localhost:4000/2019/08/07/web-page-broken-on-gke-only/">&lt;p&gt;Everybody was confused when we found a webpage running in Tomcat in a Docker container was broken only on GKE(Google Kubernetes Engine). It worked well in all other environments, including Kubernetes built on GCE(Google Compute Engine) VMs(OS: CentOS 7)or local Oracle VirtualBox VMs, Docker engine on macOS or standalone Tomcat outside of docker container. Shouldn’t container be OS-agnostic? How could it affect a web page, which is the least likely to be affected?&lt;/p&gt;

&lt;p&gt;There are a few things going on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The web page is rendered by &lt;a href=&quot;https://myfaces.apache.org/&quot;&gt;MyFaces&lt;/a&gt;. There are multiple elements on the JSF page with ‘rendered’ attribute. When it works correctly, only one of the element will render. Those conditions can’t be true at the same time;&lt;/li&gt;
  &lt;li&gt;We have a myfaces-shaded jar file on our classpath, which is a duplicate jar of other ‘real’ MyFaces implementation. If myfaces-shaded is loaded, it will throw some errors and enters an incorrect state. In this state, the ‘rendered’ attribute will be ignored on #1 page, which causes all elements to render. This is the direct cause of the broken web page;&lt;/li&gt;
  &lt;li&gt;In our ‘working’ environments other than GKE, the myfaces-shaded never gets picked up by the classloader, which is why we never discovered this problem before. But we did have developers find this from time to time. It disappeared after restarting Tomcat. So nobody has actually followed this through;&lt;/li&gt;
  &lt;li&gt;In GKE, the myfaces-shaded gets picked up by the classloader for some reason. Once we removed the myfaces-shaded in the classpath, it started to work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-1653&quot; src=&quot;http://localhost/wp-content/uploads/2019/08/gke.png&quot; alt=&quot;gke&quot; width=&quot;700&quot; height=&quot;262&quot; srcset=&quot;http://localhost/wp-content/uploads/2019/08/gke.png 700w, http://localhost/wp-content/uploads/2019/08/gke-300x112.png 300w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I suspect the GKE’s host OS, Container-Optimized OS from Google, has some optimization on the file system behaviour, which causes the order change when JVM classloader loads a list of JAR files. Imagine the JVM asks for a list of inodes with a file path list, the OS decides to optimize the response time, trying to minimize the mechanical movement. Hopefully, all data can be retrieved in one disk magnetic head trip. But the file distribution on the disk could be widely spreaded. If the head doesn’t want to go back and forth, the file order it picks up couldn’t be the same as in the API call parameter. I think this might not be an issue if the API clearly states the order is not guaranteed. And if there is an asynchronous mechanism, the JVM process might have already started to get callbacks and load jar files as the head moves across the disc radius.&lt;/p&gt;

&lt;p&gt;Nevertheless, an application should never have 2 same classes with different versions on the classpath. The loading order, which shouldn’t be relied on in the first place, in other environments hides this bug by accident.&lt;/p&gt;</content><author><name>raymondchen625</name></author><summary type="html">Everybody was confused when we found a webpage running in Tomcat in a Docker container was broken only on GKE(Google Kubernetes Engine). It worked well in all other environments, including Kubernetes built on GCE(Google Compute Engine) VMs(OS: CentOS 7)or local Oracle VirtualBox VMs, Docker engine on macOS or standalone Tomcat outside of docker container. Shouldn’t container be OS-agnostic? How could it affect a web page, which is the least likely to be affected?</summary></entry><entry><title type="html">Keep-alive Setting</title><link href="http://localhost:4000/2019/07/14/keep-alive-setting/" rel="alternate" type="text/html" title="Keep-alive Setting" /><published>2019-07-14T14:26:44-04:00</published><updated>2019-07-14T14:26:44-04:00</updated><id>http://localhost:4000/2019/07/14/keep-alive-setting</id><content type="html" xml:base="http://localhost:4000/2019/07/14/keep-alive-setting/">&lt;p&gt;We started to see intermittent 502 errors since we upgraded Nginx-ingress-controller to a certain version. After investigation, we found the root cause is related to keep-alive.&lt;/p&gt;

&lt;p&gt;Kepp-alive started to take effect since Nginx Ingress Controller 0.20.0. There is keep-alive timeout setting on both the Nginx(default=60s) and Tomcat(default=20s) sides. With both set to default, it’s always the Tomcat who closes the TCP connection, since 20&amp;lt;60. Depending on the timing, if Nginx sees the connection is open when it checks, but Tomcat closes it before Nginx can actually send data, Nginx will run into an error, returning a 502 Bad Gateway response to its client.&lt;/p&gt;

&lt;p&gt;The solution is straightforward, always setting the Nginx timeout shorter than Tomcat’s.&lt;/p&gt;</content><author><name>raymondchen625</name></author><summary type="html">We started to see intermittent 502 errors since we upgraded Nginx-ingress-controller to a certain version. After investigation, we found the root cause is related to keep-alive.</summary></entry><entry><title type="html">About Ansible</title><link href="http://localhost:4000/2019/07/08/about-ansible/" rel="alternate" type="text/html" title="About Ansible" /><published>2019-07-08T17:07:31-04:00</published><updated>2019-07-08T17:07:31-04:00</updated><id>http://localhost:4000/2019/07/08/about-ansible</id><content type="html" xml:base="http://localhost:4000/2019/07/08/about-ansible/">&lt;p&gt;The first time I used Ansible was 10 months ago when I did a research on OpenShift. The installation of OpenShift was through Ansible. But I only configured the Ansible script to install OpenShift, not really developed it. But I read a book on OpenShift.&lt;/p&gt;

&lt;p&gt;Here came an opportunity when got a task to deploy our application on GCP. I spent some extra time to make tasks automated so I didn’t need to manually do them again when I had to repeat. It’s great to revisit Ansible. Here are some thoughts I have collected during the journey:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TerraForm and/or Ansible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I couldn’t determine how to use them together at first. There were different opinions. I eventually chose to only use Ansible because in my case my focus is application deployment. Provisioning is its first step, not at the centre of everything. But there could be other scenarios provisioning is at the centre, which justifies using TerraForm, or even have TerraForm drive Ansible script.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Staging VM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I chose a staging VM(GCE Instance). That instance is also created with Ansible script. The purpose of the staging VM is to run the remaining Ansible scripts to continue provisioning application VMs and deploying applications. The reason I don’t do this in my local is hostname to IP resolving(DNS). With the staging VM residing on the same subnet on GCE, it can simply talk to other hosts by their hostnames, which saves my work to probe and collect the IP addresses dynamically.&lt;/p&gt;

&lt;p&gt;The main tasks the staging ansible script does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a small instance&lt;/li&gt;
  &lt;li&gt;Install Ansible software&lt;/li&gt;
  &lt;li&gt;Prepare SSH key so it can access other instances on the staging VM&lt;/li&gt;
  &lt;li&gt;Copy the Ansible script onto the staging VM&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Windows VM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ansible has a full set of win_* module for manipulating Windows VM. To connect to the Windows VM, I need to manually enable the WinRM service first. To simplify the process I created a Windows image with WinRM already enabled and RDP password marked down.  So for application-specific instances, I create them from my custom image so I don’t have to do extra things to have my Ansible script access them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image usage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from WinRM, I create some other images for the scenarios which I can’t automat or am not ready to automate yet. Like Oracle initialization, I manually install and configure it to a ready-to-use state, and create a disk image for it. Then next time I can create a new instance from that custom image. All I need to do is to populate data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tricks and tips
    &lt;ul&gt;
      &lt;li&gt;Don’t forget the quotes when using&lt;/li&gt;
      &lt;li&gt;Facts and hostvars are your friends&lt;/li&gt;
      &lt;li&gt;Use -vvv to debug when needed&lt;/li&gt;
      &lt;li&gt;lineinfile/win_lininfile can be used to modify text files. But use them in descretion or it will be quite messy.&lt;/li&gt;
      &lt;li&gt;Some optimization methods can be applied if better performance is required, like fact caching, ssh multiplexing or simply run playbooks in parallel if that doesn’t affect the correctness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>raymondchen625</name></author><summary type="html">The first time I used Ansible was 10 months ago when I did a research on OpenShift. The installation of OpenShift was through Ansible. But I only configured the Ansible script to install OpenShift, not really developed it. But I read a book on OpenShift.</summary></entry><entry><title type="html">About socket</title><link href="http://localhost:4000/2019/04/28/about-socket/" rel="alternate" type="text/html" title="About socket" /><published>2019-04-28T06:19:42-04:00</published><updated>2019-04-28T06:19:42-04:00</updated><id>http://localhost:4000/2019/04/28/about-socket</id><content type="html" xml:base="http://localhost:4000/2019/04/28/about-socket/">&lt;p&gt;Most if not all of my applications I have worked on were about HTTP, which is a stateless protocol. Until lately we started to work on a feature with websocket.&lt;/p&gt;

&lt;p&gt;I ran some tests to help me understand how the connection is opened and closed. I deploy several websocket services in containers. I use a wscat tool to access them.&lt;/p&gt;

&lt;p&gt;Some observations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The connection will keep open even I don’t send any data in hours. That depends on the implementation of the nodes between them. Say if we have routers between them, some routers might decide to drop the session in 1 idle hour. That’s why we usually need keepalive to keep it going.&lt;/li&gt;
  &lt;li&gt;When I kill the client process or the server process, the connection will be closed shortly. That’s due to the mechanism when a Linux process receives a terminate signal (KILL), it tries to close the file descriptors and TCP connections as cleanup.&lt;/li&gt;
  &lt;li&gt;If I terminate some service between them, like the ‘flanneld’ in my Kubernetes service, which also brings down the docker service, the connection is in fact closed. But the client won’t notice it until it tries to send data again. That’s due to when I do that, it’s like powering off some routers, the Linux process termination mechanism has no chance to kick in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sockets try their best to clean up on many occasions. But keep alive is still needed&lt;/li&gt;
  &lt;li&gt;The network nodes between the two parties have impacts on the behaviors. Some might keep a shorter session. Some might not be able to clean up when they go out of service.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>raymondchen625</name></author><summary type="html">Most if not all of my applications I have worked on were about HTTP, which is a stateless protocol. Until lately we started to work on a feature with websocket.</summary></entry><entry><title type="html">Manifest and Lock</title><link href="http://localhost:4000/2019/04/14/manifest-and-lock/" rel="alternate" type="text/html" title="Manifest and Lock" /><published>2019-04-14T05:36:48-04:00</published><updated>2019-04-14T05:36:48-04:00</updated><id>http://localhost:4000/2019/04/14/manifest-and-lock</id><content type="html" xml:base="http://localhost:4000/2019/04/14/manifest-and-lock/">&lt;p&gt;I  saw the usage of manifest and lock before, like Yarn for a node.js project. But rarely gave much thought on how it worked.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/sdboyer&quot;&gt;Sam Boyer&lt;/a&gt; provides &lt;a href=&quot;https://changelog.com/gotime/36&quot;&gt;a brief summary&lt;/a&gt; on this which sounds great to me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… manifests essentially describe constraints, and manifests only describe constraints on your direct dependencies, whereas locks are a transitively-complete picture of the entire dependency graph; there aren’t constraints in there, there are specific revisions, ideally immutable revisions.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>raymondchen625</name></author><summary type="html">I  saw the usage of manifest and lock before, like Yarn for a node.js project. But rarely gave much thought on how it worked.</summary></entry><entry><title type="html">Goroutine and channel</title><link href="http://localhost:4000/2019/03/20/goroutine-and-channel/" rel="alternate" type="text/html" title="Goroutine and channel" /><published>2019-03-20T12:22:52-04:00</published><updated>2019-03-20T12:22:52-04:00</updated><id>http://localhost:4000/2019/03/20/goroutine-and-channel</id><content type="html" xml:base="http://localhost:4000/2019/03/20/goroutine-and-channel/">&lt;p&gt;This is a mini retrospect of the fundamentals of goroutine and channel in Go after getting stuck in &lt;a href=&quot;https://exercism.io/my/solutions/e068e2c9b931409781e26e36c43382d7&quot;&gt;an exercism task&lt;/a&gt;. The full official details can always be found in the &lt;a href=&quot;https://golang.org/ref/spec&quot;&gt;language spec&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Channel is supposed to be shared between different goroutines (or your main and sub goroutines)&lt;/li&gt;
  &lt;li&gt;Usually at least one goroutine puts things in the channel, and at least one other consume things in it&lt;/li&gt;
  &lt;li&gt;When `c:=range channelXxx` is used, the loop will loop indefinitely until somebody closes the channel. That doesn’t mean you can not get out of the loop by other means, like ‘break’, ‘return’…&lt;/li&gt;
  &lt;li&gt;The main goroutine will exit without waiting for the completion of other goroutines, unless we use waitgroup, conditional loop or range-channel-loop in the main method to block its exit. And exit when some condition is changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of my difficulties were caused by my misunderstanding of these fundamentals, or my doubt on my understanding which was correct.&lt;/p&gt;</content><author><name>raymondchen625</name></author><summary type="html">This is a mini retrospect of the fundamentals of goroutine and channel in Go after getting stuck in an exercism task. The full official details can always be found in the language spec.</summary></entry><entry><title type="html">Container Running User</title><link href="http://localhost:4000/2018/10/04/container-running-user/" rel="alternate" type="text/html" title="Container Running User" /><published>2018-10-04T15:58:45-04:00</published><updated>2018-10-04T15:58:45-04:00</updated><id>http://localhost:4000/2018/10/04/container-running-user</id><content type="html" xml:base="http://localhost:4000/2018/10/04/container-running-user/">&lt;p&gt;Running a Docker container as root could raise a lot of red flags in security scanning. So we have been trying to make our Docker containers support running as non-root user lately.&lt;/p&gt;

&lt;p&gt;The summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Need to create a default user when we build the image in Dockerfile. use ‘USER username’ to indicate by default it’s running as that user. Some scanning tools will check this&lt;/li&gt;
  &lt;li&gt;In Kubernetes deployment YML file, add the securityContext section like below:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;securityContext:&lt;br /&gt;
  runAsUser: 2000&lt;br /&gt;
  fsGroup: 2001&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will override the ‘USER’ in Docker image&lt;/p&gt;</content><author><name>raymondchen625</name></author><summary type="html">Running a Docker container as root could raise a lot of red flags in security scanning. So we have been trying to make our Docker containers support running as non-root user lately.</summary></entry><entry><title type="html">Apple Script, Better Touch Tool and Touch Bar</title><link href="http://localhost:4000/2018/09/16/apple-script-better-touch-tool-and-touch-bar/" rel="alternate" type="text/html" title="Apple Script, Better Touch Tool and Touch Bar" /><published>2018-09-16T11:44:23-04:00</published><updated>2018-09-16T11:44:23-04:00</updated><id>http://localhost:4000/2018/09/16/apple-script-better-touch-tool-and-touch-bar</id><content type="html" xml:base="http://localhost:4000/2018/09/16/apple-script-better-touch-tool-and-touch-bar/">&lt;p&gt;Since I subscribed YouTube Premium, I’ve got the YouTube Music. So I would listen in my Chrome.&lt;/p&gt;

&lt;p&gt;Spent a little time to learn Apple Script and created &lt;a href=&quot;https://community.folivora.ai/t/display-music-title-playing-in-browser-and-press-to-pause-resume/3744&quot;&gt;a button on Touch Bar&lt;/a&gt;. It can show the playing music title. Press the button it will pause/resume.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div id=&quot;gallery-1&quot; class=&quot;gallery galleryid-1584 gallery-columns-3 gallery-size-thumbnail&quot;&gt;
  &lt;figure class=&quot;gallery-item&quot;&gt; 
  
  &lt;div class=&quot;gallery-icon landscape&quot;&gt;
    &lt;a href=&quot;http://localhost/2018/09/16/apple-script-better-touch-tool-and-touch-bar/touchbar/&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;60&quot; src=&quot;http://localhost/wp-content/uploads/2018/09/touchbar-150x60.png&quot; class=&quot;attachment-thumbnail size-thumbnail&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/div&gt;</content><author><name>raymondchen625</name></author><summary type="html">Since I subscribed YouTube Premium, I’ve got the YouTube Music. So I would listen in my Chrome.</summary></entry></feed>